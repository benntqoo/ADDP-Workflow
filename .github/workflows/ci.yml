name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Run integration tests
      run: go test -v ./test/integration/...

    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 60" | bc -l) )); then
          echo "Coverage is below 60%"
          exit 1
        fi

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22
        cache: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22
        cache: true

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: [test, lint]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: [1.22]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Build for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        GOOS=linux GOARCH=amd64 go build -v -o bin/ai-launcher-linux-amd64 ./cmd/launcher
        GOOS=linux GOARCH=arm64 go build -v -o bin/ai-launcher-linux-arm64 ./cmd/launcher

    - name: Build for Windows
      if: matrix.os == 'windows-latest'
      run: |
        go build -v -o bin/ai-launcher-windows-amd64.exe ./cmd/launcher

    - name: Build for macOS
      if: matrix.os == 'macos-latest'
      run: |
        GOOS=darwin GOARCH=amd64 go build -v -o bin/ai-launcher-darwin-amd64 ./cmd/launcher
        GOOS=darwin GOARCH=arm64 go build -v -o bin/ai-launcher-darwin-arm64 ./cmd/launcher

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ matrix.os }}
        path: bin/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, security]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          binaries-ubuntu-latest/ai-launcher-linux-amd64
          binaries-ubuntu-latest/ai-launcher-linux-arm64
          binaries-windows-latest/ai-launcher-windows-amd64.exe
          binaries-macos-latest/ai-launcher-darwin-amd64
          binaries-macos-latest/ai-launcher-darwin-arm64
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ai-launcher:latest
          ai-launcher:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max