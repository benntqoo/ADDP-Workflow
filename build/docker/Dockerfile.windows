# Windows Cross-Compilation Dockerfile for AI Launcher GUI
FROM golang:1.23-bullseye AS cross

# Set working directory
WORKDIR /app

# Install build dependencies for Windows cross-compilation
# Note: Network on some hosts (e.g. corporate/China networks) may fail DNS to deb.debian.org
# Add retries, fallback DNS, and optional mirror support via build-arg APT_MIRROR
ARG APT_MIRROR=deb.debian.org
RUN set -eux; \
    echo 'Acquire::Retries "5";' > /etc/apt/apt.conf.d/80retries; \
    sed -i "s|deb.debian.org|${APT_MIRROR}|g" /etc/apt/sources.list; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
      gcc-mingw-w64 \
      pkg-config; \
    rm -rf /var/lib/apt/lists/*

# Ensure Go is on PATH (normally set by the base image)
ENV PATH=/usr/local/go/bin:${PATH}

# ------------------------------
# Builder stage uses preinstalled cross toolchain
FROM cross AS builder

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the Windows GUI application with cross-compilation
# CGO is required for Fyne, using mingw for Windows
RUN CGO_ENABLED=1 GOOS=windows GOARCH=amd64 CC=x86_64-w64-mingw32-gcc \
    go build -v -o ai-launcher.exe ./cmd/gui

# Final stage - use scratch for minimal image
FROM scratch

# Copy binary from builder stage
COPY --from=builder /app/ai-launcher.exe /ai-launcher.exe

# Entry point (for reference, won't run in scratch)
ENTRYPOINT ["/ai-launcher.exe"]
